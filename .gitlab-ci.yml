# Pipeline CI/CD pour Grammachat
# Configuration GitLab CI pour l'int√©gration et le d√©ploiement continu

# Variables globales
variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  NODE_VERSION: "18"
  MONGODB_VERSION: "7.0"
  REDIS_VERSION: "7.2"

# Stages du pipeline
stages:
  - setup
  - lint
  - test
  - build
  - security
  - deploy

# Services n√©cessaires pour les tests
services:
  - name: mongo:7.0
    alias: mongodb
  - name: redis:7.2-alpine
    alias: redis

# Cache pour optimiser les builds
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - backend/node_modules/
    - frontend/node_modules/
    - .npm/

# Job de configuration de l'environnement
setup:
  stage: setup
  image: node:18-alpine
  script:
    - echo "üîß Configuration de l'environnement de d√©veloppement"
    - node --version
    - npm --version
    - echo "‚úÖ Environnement configur√©"
  only:
    - main
    - develop
    - merge_requests

# Job de v√©rification du code (Linting)
lint_backend:
  stage: lint
  image: node:18-alpine
  before_script:
    - cd backend
    - npm ci
  script:
    - echo "üîç V√©rification du code Backend (ESLint)"
    - npm run lint
    - echo "‚úÖ Linting Backend termin√©"
  artifacts:
    reports:
      junit: backend/lint-results.xml
    when: always
  only:
    - main
    - develop
    - merge_requests

lint_frontend:
  stage: lint
  image: node:18-alpine
  before_script:
    - cd frontend
    - npm ci
  script:
    - echo "üîç V√©rification du code Frontend (ESLint)"
    - npm run lint
    - echo "‚úÖ Linting Frontend termin√©"
  artifacts:
    reports:
      junit: frontend/lint-results.xml
    when: always
  only:
    - main
    - develop
    - merge_requests

# Job de formatage du code (Prettier)
format_check:
  stage: lint
  image: node:18-alpine
  script:
    - echo "üé® V√©rification du formatage du code"
    - cd backend && npm ci && npm run format -- --check
    - cd ../frontend && npm ci && npm run format -- --check
    - echo "‚úÖ Formatage v√©rifi√©"
  only:
    - main
    - develop
    - merge_requests

# Jobs de tests
test_backend:
  stage: test
  image: node:18-alpine
  services:
    - name: mongo:7.0
      alias: mongodb
    - name: redis:7.2-alpine
      alias: redis
  variables:
    MONGODB_URI: "mongodb://mongodb:27017/grammachat_test"
    REDIS_URL: "redis://redis:6379"
    NODE_ENV: "test"
  before_script:
    - cd backend
    - npm ci
  script:
    - echo "üß™ Ex√©cution des tests Backend"
    - npm run test:coverage
    - echo "‚úÖ Tests Backend termin√©s"
  artifacts:
    reports:
      junit: backend/coverage/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: backend/coverage/cobertura-coverage.xml
    when: always
  coverage: '/Lines\s*:\s*(\d+\.\d+)%/'
  only:
    - main
    - develop
    - merge_requests

test_frontend:
  stage: test
  image: node:18-alpine
  before_script:
    - cd frontend
    - npm ci
  script:
    - echo "üß™ Ex√©cution des tests Frontend"
    - npm run test:coverage
    - echo "‚úÖ Tests Frontend termin√©s"
  artifacts:
    reports:
      junit: frontend/coverage/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: frontend/coverage/cobertura-coverage.xml
    when: always
  coverage: '/Lines\s*:\s*(\d+\.\d+)%/'
  only:
    - main
    - develop
    - merge_requests

# Job de tests d'int√©gration
test_integration:
  stage: test
  image: node:18-alpine
  services:
    - name: mongo:7.0
      alias: mongodb
    - name: redis:7.2-alpine
      alias: redis
  variables:
    MONGODB_URI: "mongodb://mongodb:27017/grammachat_test"
    REDIS_URL: "redis://redis:6379"
    NODE_ENV: "test"
  before_script:
    - npm install -g jest
    - cd tests/automation
    - npm ci
  script:
    - echo "üîó Ex√©cution des tests d'int√©gration"
    - node run-tests.js
    - echo "‚úÖ Tests d'int√©gration termin√©s"
  artifacts:
    reports:
      junit: tests/integration-results.xml
    paths:
      - test-report.html
      - test-report.json
    when: always
  only:
    - main
    - develop
    - merge_requests

# Job de build Docker
build_docker:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "üê≥ Construction des images Docker"
    - docker build -t $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA ./backend
    - docker build -t $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA ./frontend
    - docker push $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA
    - echo "‚úÖ Images Docker construites et pouss√©es"
  only:
    - main
    - develop

# Job de s√©curit√©
security_scan:
  stage: security
  image: node:18-alpine
  before_script:
    - npm install -g npm-audit
  script:
    - echo "üîí Analyse de s√©curit√©"
    - cd backend && npm audit --audit-level moderate
    - cd ../frontend && npm audit --audit-level moderate
    - echo "‚úÖ Analyse de s√©curit√© termin√©e"
  allow_failure: true
  only:
    - main
    - develop
    - merge_requests

# Job de d√©ploiement en d√©veloppement
deploy_dev:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "üöÄ D√©ploiement en environnement de d√©veloppement"
    - curl -X POST "$DEV_DEPLOY_WEBHOOK" -H "Content-Type: application/json" -d '{"ref":"'$CI_COMMIT_SHA'","environment":"development"}'
    - echo "‚úÖ D√©ploiement en dev termin√©"
  environment:
    name: development
    url: https://dev.grammachat.com
  only:
    - develop

# Job de d√©ploiement en production
deploy_prod:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "üöÄ D√©ploiement en production"
    - curl -X POST "$PROD_DEPLOY_WEBHOOK" -H "Content-Type: application/json" -d '{"ref":"'$CI_COMMIT_SHA'","environment":"production"}'
    - echo "‚úÖ D√©ploiement en production termin√©"
  environment:
    name: production
    url: https://grammachat.com
  when: manual
  only:
    - main

# Job de notification
notify:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "üì¢ Envoi des notifications"
    - |
      if [ "$CI_PIPELINE_STATUS" = "success" ]; then
        curl -X POST "$SLACK_WEBHOOK" -H "Content-Type: application/json" -d '{
          "text": "‚úÖ Pipeline r√©ussi pour Grammachat",
          "attachments": [{
            "color": "good",
            "fields": [{
              "title": "Branche",
              "value": "'$CI_COMMIT_REF_NAME'",
              "short": true
            }, {
              "title": "Commit",
              "value": "'$CI_COMMIT_SHA'",
              "short": true
            }, {
              "title": "Auteur",
              "value": "'$CI_COMMIT_AUTHOR'",
              "short": true
            }]
          }]
        }'
      else
        curl -X POST "$SLACK_WEBHOOK" -H "Content-Type: application/json" -d '{
          "text": "‚ùå Pipeline √©chou√© pour Grammachat",
          "attachments": [{
            "color": "danger",
            "fields": [{
              "title": "Branche",
              "value": "'$CI_COMMIT_REF_NAME'",
              "short": true
            }, {
              "title": "Commit",
              "value": "'$CI_COMMIT_SHA'",
              "short": true
            }]
          }]
        }'
      fi
    - echo "‚úÖ Notifications envoy√©es"
  when: always
  only:
    - main
    - develop

# Job de nettoyage
cleanup:
  stage: deploy
  image: alpine:latest
  script:
    - echo "üßπ Nettoyage des ressources temporaires"
    - echo "‚úÖ Nettoyage termin√©"
  when: always
  only:
    - main
    - develop
