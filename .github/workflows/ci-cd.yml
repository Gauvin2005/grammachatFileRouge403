# Pipeline CI/CD simplifié pour Grammachat
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  MONGODB_VERSION: '7.0'
  REDIS_VERSION: '7.2'

jobs:
  # Tests et qualité de code
  test-and-lint:
    name: Tests & Code Quality
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 10s
          --health-retries 10
          --health-start-period 30s
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 10s
          --health-retries 10
          --health-start-period 30s

    env:
      MONGODB_URI: mongodb://localhost:27017/grammachat_test
      REDIS_URL: redis://localhost:6379
      NODE_ENV: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Backend: lint, format et tests
      - name: Backend - Install & Lint
        run: |
          cd backend
          npm ci
          npm run lint
          npm run format -- --check

      - name: Backend - Tests
        run: |
          cd tests
          npm ci
          node run-tests.js

      # Audit de sécurité
      - name: Security Audit
        run: |
          cd backend && npm audit --audit-level moderate
          cd ../tests && npm audit --audit-level moderate

  # Build et déploiement Docker
  build-and-deploy:
    name: Build & Deploy
    runs-on: self-hosted
    needs: test-and-lint
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create production environment file
        run: |
          cat > .env.prod << EOF
          API_PORT=3000
          MONGODB_PORT=27017
          REDIS_PORT=6379
          MONGODB_URI=${{ secrets.MONGODB_URI }}
          MONGODB_DATABASE=${{ secrets.MONGODB_DATABASE }}
          NODE_ENV=production
          API_HOST=0.0.0.0
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_EXPIRES_IN=7d
          REDIS_URL=${{ secrets.REDIS_URL }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          REDIS_SESSION_TTL=604800
          REDIS_MESSAGES_TTL=300
          REDIS_LEADERBOARD_TTL=600
          REDIS_PROFILE_TTL=900
          REDIS_STATS_TTL=1800
          LANGUAGETOOL_API_URL=https://api.languagetool.org/v2/check
          LANGUAGETOOL_API_KEY=${{ secrets.LANGUAGETOOL_API_KEY }}
          XP_PER_CHARACTER=1
          XP_BONUS_NO_ERRORS=10
          XP_PENALTY_PER_ERROR=5
          LEVEL_UP_THRESHOLD=100
          CORS_ORIGIN=*
          EOF

      - name: Build, Tag, and Deploy Backend
        run: |
          APP_VERSION=$(date +'%Y%m%d%H%M%S')
          IMAGE_NAME="grammachat-backend"

          echo "Deploying Grammachat version: $APP_VERSION"

          docker stop $IMAGE_NAME || true
          docker rm $IMAGE_NAME || true

          docker build -t ${IMAGE_NAME}:${APP_VERSION} ./backend
          docker tag ${IMAGE_NAME}:${APP_VERSION} ${IMAGE_NAME}:latest

          docker run -d \
            --name $IMAGE_NAME \
            --restart unless-stopped \
            -p 3000:3000 \
            --env-file .env.prod \
            ${IMAGE_NAME}:${APP_VERSION}

      - name: Verify container is running
        run: |
          sleep 5
          docker ps | grep grammachat-backend
          docker logs --tail 50 grammachat-backend

  # Notifications (optionnel)
  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [test-and-lint, build-and-deploy]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ needs.test-and-lint.result == 'success' && needs.build-and-deploy.result == 'success' && 'success' || 'failure' }}
          channel: '#Gavin'
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            Tests: ${{ needs.test-and-lint.result }}
            Build & Deploy: ${{ needs.build-and-deploy.result }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
