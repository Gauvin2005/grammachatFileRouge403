# Pipeline CI/CD simplifié pour Grammachat
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  MONGODB_VERSION: '7.0'
  REDIS_VERSION: '7.2'

jobs:
  # Tests et qualité de code
  test-and-lint:
    name: Tests & Code Quality
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      MONGODB_URI: mongodb://localhost:27017/grammachat_test
      REDIS_URL: redis://localhost:6379
      NODE_ENV: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Backend: lint, format et tests
      - name: Backend - Install & Lint
        run: |
          cd backend
          npm ci
          npm run lint
          npm run format -- --check

      - name: Backend - Tests
        run: |
          cd backend
          npm run test:coverage

      # Tests d'intégration
      - name: Integration Tests
        run: |
          cd tests
          npm ci
          npm test

      # Audit de sécurité
      - name: Security Audit
        run: |
          cd backend && npm audit --audit-level moderate
          cd ../tests && npm audit --audit-level moderate

      # Upload des rapports de couverture
      - name: Upload Coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # Build et déploiement Docker
  build-and-deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: test-and-lint
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build de l'image backend uniquement (pas de frontend séparé)
      - name: Build & Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/grammachat-backend:${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/grammachat-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Déploiement selon l'environnement
      - name: Deploy to Development
        if: github.ref == 'refs/heads/develop'
        run: |
          curl -X POST "${{ secrets.DEV_DEPLOY_WEBHOOK }}" \
            -H "Content-Type: application/json" \
            -d '{"ref":"${{ github.sha }}","environment":"development"}'

      - name: Deploy to Production
        if: github.ref == 'refs/heads/main'
        run: |
          curl -X POST "${{ secrets.PROD_DEPLOY_WEBHOOK }}" \
            -H "Content-Type: application/json" \
            -d '{"ref":"${{ github.sha }}","environment":"production"}'

  # Notifications (optionnel)
  # notify:
  #   name: Notifications
  #   runs-on: ubuntu-latest
  #   needs: build-and-deploy
  #   if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
  #   steps:
  #     - name: Notify Slack
  #       uses: 8398a7/action-slack@v3
  #       with:
  #         status: ${{ job.status }}
  #         channel: '#grammachat'
  #         webhook_url: ${{ secrets.SLACK_WEBHOOK }}
  #         fields: repo,message,commit,author,action,eventName,ref,workflow
