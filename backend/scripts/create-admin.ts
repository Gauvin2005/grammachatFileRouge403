#!/usr/bin/env ts-node

/**
 * Script pour cr√©er le premier compte administrateur
 * Usage: npm run create-admin
 */

import mongoose from 'mongoose';
import User from '../src/models/User';
import { config } from 'dotenv';

// Charger les variables d'environnement
config();

const createAdmin = async () => {
  try {
    // Connexion √† MongoDB
    const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/grammachat';
    await mongoose.connect(mongoUri);
    console.log('‚úÖ Connect√© √† MongoDB');

    // V√©rifier si un admin existe d√©j√†
    const existingAdmin = await User.findOne({ role: 'admin' });
    if (existingAdmin) {
      console.log('‚ö†Ô∏è  Un administrateur existe d√©j√†:', existingAdmin.email);
      process.exit(0);
    }

    // Cr√©er le compte admin
    const adminData = {
      email: process.env.ADMIN_EMAIL || 'admin@grammachat.com',
      username: process.env.ADMIN_USERNAME || 'admin',
      password: process.env.ADMIN_PASSWORD || 'admin123456',
      role: 'admin' as const,
      xp: 0,
      level: 1
    };

    const admin = new User(adminData);
    await admin.save();

    console.log('üéâ Compte administrateur cr√©√© avec succ√®s !');
    console.log('üìß Email:', admin.email);
    console.log('üë§ Username:', admin.username);
    console.log('üîë Mot de passe:', adminData.password);
    console.log('‚ö†Ô∏è  N\'oubliez pas de changer le mot de passe apr√®s la premi√®re connexion !');

  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de l\'administrateur:', error);
    process.exit(1);
  } finally {
    await mongoose.disconnect();
    console.log('üîå D√©connect√© de MongoDB');
  }
};

// Ex√©cuter le script
createAdmin();
